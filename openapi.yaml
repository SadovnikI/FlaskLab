openapi: 3.0.1
info:
  title: Swagger Petstore
  version: 1.0.0
servers:
- url: https://Wallet/v1
tags:
- name: transaction
  description: Money transections
- name: wallet
  description: Users Wallet
- name: user
  description: Operations about user
paths:
  /transaction/{wallet_id}/sendmoney:
    post:
      tags:
      - transaction
      summary: Send money to other user
      operationId: transactionToUser
      parameters:
      - name: wallet_id
        in: path
        required: true
        schema:
          type: string
      - name: funds
        in: query
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/Wallet'
                - $ref: '#/components/schemas/Transaction' 
        default:
          description: Error
      security:
      - BasicAuth: []  
  /transaction/{wallet_id}:
    get:
      tags:
      - transaction
      operationId: transactionList
      summary: List of all user transactions
      parameters:
      - name: wallet_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: return list of transactions with this wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        default:
          description: Error
      security:
      - BasicAuth: []            
  /wallet:
    get:
      tags:
      - wallet
      summary: Returns users wallets
      operationId: getWallet
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Wallet'
        default:
          description: Error
                     
      security:
      - BasicAuth: []
    post:
      tags:
      - wallet
      summary: Creates new Wallet
      operationId: createWallet
      requestBody:
        description: wallet init data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Walletcreation'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        400:
          description: Invalid Data
          content: {}
        default:
          description: Error
      x-codegen-request-body-name: body
      security:
      - BasicAuth: []
  /wallet/{walletId}:
    get:
      tags:
      - wallet
      summary: Find wallet by id
      description: Find wallet by id
      operationId: getWalletById
      parameters:
      - name: walletId
        in: path
        description: ID of pet that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Wallet not found
          content: {}
        default:
          description: Error
      security:
      - BasicAuth: []
    delete:
      tags:
      - wallet
      summary: Delete wallet
      description: This can only be done by the logged in user.
      operationId: deletewallet
      parameters:
      - name: walletId
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid walletid supplied
          content: {}
        404:
          description: wallet not found
          content: {}
        default:
          description: Error
  /user:
    get:
      tags:
        - user
      summary: Give list of Users
      operationId: usersList
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'
        default:
          description: Error
                     
    post:
      tags:
      - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
        default:
          description: Error
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
        default:
          description: Error
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
        default:
          description: Error
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        resiverid:
          type: integer
          format: int64
        senderid:
          type: integer
          format: int64
        funds:
          type: integer
          format: int64
    Walletcreation:
      type: object
      properties:
        id:
          type: integer
          format: int64 
        currency:
          type: string          
    Wallet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        currency:
          type: string
        userid:
          type: integer
          format: int64
        money:
          type: integer
          format: int64
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
  
    